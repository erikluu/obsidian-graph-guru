/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/python-shell/index.js
var require_python_shell = __commonJS({
  "node_modules/python-shell/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PythonShell = exports.NewlineTransformer = exports.PythonShellErrorWithLogs = exports.PythonShellError = void 0;
    var events_1 = require("events");
    var child_process_1 = require("child_process");
    var os_1 = require("os");
    var path_1 = require("path");
    var stream_1 = require("stream");
    var fs_1 = require("fs");
    var util_1 = require("util");
    function toArray(source) {
      if (typeof source === "undefined" || source === null) {
        return [];
      } else if (!Array.isArray(source)) {
        return [source];
      }
      return source;
    }
    function extend(obj, ...args) {
      Array.prototype.slice.call(arguments, 1).forEach(function(source) {
        if (source) {
          for (let key in source) {
            obj[key] = source[key];
          }
        }
      });
      return obj;
    }
    function getRandomInt() {
      return Math.floor(Math.random() * 1e10);
    }
    var execPromise = (0, util_1.promisify)(child_process_1.exec);
    var PythonShellError = class extends Error {
    };
    exports.PythonShellError = PythonShellError;
    var PythonShellErrorWithLogs = class extends PythonShellError {
    };
    exports.PythonShellErrorWithLogs = PythonShellErrorWithLogs;
    var NewlineTransformer = class extends stream_1.Transform {
      _transform(chunk, encoding, callback) {
        let data = chunk.toString();
        if (this._lastLineData)
          data = this._lastLineData + data;
        const lines = data.split(os_1.EOL);
        this._lastLineData = lines.pop();
        lines.forEach(this.push.bind(this));
        callback();
      }
      _flush(done) {
        if (this._lastLineData)
          this.push(this._lastLineData);
        this._lastLineData = null;
        done();
      }
    };
    exports.NewlineTransformer = NewlineTransformer;
    var PythonShell2 = class extends events_1.EventEmitter {
      /**
       * spawns a python process
       * @param scriptPath path to script. Relative to current directory or options.scriptFolder if specified
       * @param options
       * @param stdoutSplitter Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines
       * @param stderrSplitter Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines
       */
      constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null) {
        super();
        function resolve(type, val) {
          if (typeof val === "string") {
            return PythonShell2[type][val];
          } else if (typeof val === "function") {
            return val;
          }
        }
        if (scriptPath.trim().length == 0)
          throw Error("scriptPath cannot be empty! You must give a script for python to run");
        let self = this;
        let errorData = "";
        events_1.EventEmitter.call(this);
        options = extend({}, PythonShell2.defaultOptions, options);
        let pythonPath;
        if (!options.pythonPath) {
          pythonPath = PythonShell2.defaultPythonPath;
        } else
          pythonPath = options.pythonPath;
        let pythonOptions = toArray(options.pythonOptions);
        let scriptArgs = toArray(options.args);
        this.scriptPath = (0, path_1.join)(options.scriptPath || "", scriptPath);
        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);
        this.mode = options.mode || "text";
        this.formatter = resolve("format", options.formatter || this.mode);
        this.parser = resolve("parse", options.parser || this.mode);
        this.stderrParser = resolve("parse", options.stderrParser || "text");
        this.terminated = false;
        this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);
        ["stdout", "stdin", "stderr"].forEach(function(name) {
          self[name] = self.childProcess[name];
          self.parser && self[name] && self[name].setEncoding(options.encoding || "utf8");
        });
        if (this.parser && this.stdout) {
          if (!stdoutSplitter)
            stdoutSplitter = new NewlineTransformer();
          stdoutSplitter.setEncoding(options.encoding || "utf8");
          this.stdout.pipe(stdoutSplitter).on("data", (chunk) => {
            this.emit("message", self.parser(chunk));
          });
        }
        if (this.stderrParser && this.stderr) {
          if (!stderrSplitter)
            stderrSplitter = new NewlineTransformer();
          stderrSplitter.setEncoding(options.encoding || "utf8");
          this.stderr.pipe(stderrSplitter).on("data", (chunk) => {
            this.emit("stderr", self.stderrParser(chunk));
          });
        }
        if (this.stderr) {
          this.stderr.on("data", function(data) {
            errorData += "" + data;
          });
          this.stderr.on("end", function() {
            self.stderrHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stderrHasEnded = true;
        }
        if (this.stdout) {
          this.stdout.on("end", function() {
            self.stdoutHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stdoutHasEnded = true;
        }
        this.childProcess.on("error", function(err) {
          self.emit("error", err);
        });
        this.childProcess.on("exit", function(code, signal) {
          self.exitCode = code;
          self.exitSignal = signal;
          terminateIfNeeded();
        });
        function terminateIfNeeded() {
          if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null)
            return;
          let err;
          if (self.exitCode && self.exitCode !== 0) {
            if (errorData) {
              err = self.parseError(errorData);
            } else {
              err = new PythonShellError("process exited with code " + self.exitCode);
            }
            err = extend(err, {
              executable: pythonPath,
              options: pythonOptions.length ? pythonOptions : null,
              script: self.scriptPath,
              args: scriptArgs.length ? scriptArgs : null,
              exitCode: self.exitCode
            });
            if (self.listeners("pythonError").length || !self._endCallback) {
              self.emit("pythonError", err);
            }
          }
          self.terminated = true;
          self.emit("close");
          self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);
        }
        ;
      }
      /**
       * checks syntax without executing code
       * @returns rejects promise w/ string error output if syntax failure
       */
      static checkSyntax(code) {
        return __awaiter(this, void 0, void 0, function* () {
          const randomInt = getRandomInt();
          const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;
          const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);
          return writeFilePromise(filePath, code).then(() => {
            return this.checkSyntaxFile(filePath);
          });
        });
      }
      static getPythonPath() {
        return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;
      }
      /**
       * checks syntax without executing code
       * @returns {Promise} rejects w/ stderr if syntax failure
       */
      static checkSyntaxFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
          const pythonPath = this.getPythonPath();
          let compileCommand = `${pythonPath} -m py_compile ${filePath}`;
          return execPromise(compileCommand);
        });
      }
      /**
       * Runs a Python script and returns collected messages as a promise.
       * If the promise is rejected, the err will probably be of type PythonShellErrorWithLogs
       * @param scriptPath   The path to the script to execute
       * @param options  The execution options
       */
      static run(scriptPath, options) {
        return new Promise((resolve, reject) => {
          let pyshell = new PythonShell2(scriptPath, options);
          let output = [];
          pyshell.on("message", function(message) {
            output.push(message);
          }).end(function(err) {
            if (err) {
              err.logs = output;
              reject(err);
            } else
              resolve(output);
          });
        });
      }
      /**
       * Runs the inputted string of python code and returns collected messages as a promise. DO NOT ALLOW UNTRUSTED USER INPUT HERE!
       * @param code   The python code to execute
       * @param options  The execution options
       * @return a promise with the output from the python script
       */
      static runString(code, options) {
        const randomInt = getRandomInt();
        const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;
        (0, fs_1.writeFileSync)(filePath, code);
        return PythonShell2.run(filePath, options);
      }
      static getVersion(pythonPath) {
        if (!pythonPath)
          pythonPath = this.getPythonPath();
        return execPromise(pythonPath + " --version");
      }
      static getVersionSync(pythonPath) {
        if (!pythonPath)
          pythonPath = this.getPythonPath();
        return (0, child_process_1.execSync)(pythonPath + " --version").toString();
      }
      /**
       * Parses an error thrown from the Python process through stderr
       * @param  {string|Buffer} data The stderr contents to parse
       * @return {Error} The parsed error with extended stack trace when traceback is available
       */
      parseError(data) {
        let text = "" + data;
        let error;
        if (/^Traceback/.test(text)) {
          let lines = text.trim().split(os_1.EOL);
          let exception = lines.pop();
          error = new PythonShellError(exception);
          error.traceback = data;
          error.stack += os_1.EOL + "    ----- Python Traceback -----" + os_1.EOL + "  ";
          error.stack += lines.slice(1).join(os_1.EOL + "  ");
        } else {
          error = new PythonShellError(text);
        }
        return error;
      }
      /**
       * Sends a message to the Python shell through stdin
       * Override this method to format data to be sent to the Python process
       * @returns {PythonShell} The same instance for chaining calls
       */
      send(message) {
        if (!this.stdin)
          throw new Error("stdin not open for writing");
        let data = this.formatter ? this.formatter(message) : message;
        if (this.mode !== "binary")
          data += os_1.EOL;
        this.stdin.write(data);
        return this;
      }
      /**
       * Closes the stdin stream. Unless python is listening for stdin in a loop
       * this should cause the process to finish its work and close.
       * @returns {PythonShell} The same instance for chaining calls
       */
      end(callback) {
        if (this.childProcess.stdin) {
          this.childProcess.stdin.end();
        }
        this._endCallback = callback;
        return this;
      }
      /**
       * Sends a kill signal to the process
       * @returns {PythonShell} The same instance for chaining calls
       */
      kill(signal) {
        this.terminated = this.childProcess.kill(signal);
        return this;
      }
      /**
       * Alias for kill.
       * @deprecated
       */
      terminate(signal) {
        return this.kill(signal);
      }
    };
    exports.PythonShell = PythonShell2;
    PythonShell2.defaultPythonPath = process.platform != "win32" ? "python3" : "python";
    PythonShell2.defaultOptions = {};
    PythonShell2.format = {
      text: function toText(data) {
        if (!data)
          return "";
        else if (typeof data !== "string")
          return data.toString();
        return data;
      },
      json: function toJson(data) {
        return JSON.stringify(data);
      }
    };
    PythonShell2.parse = {
      text: function asText(data) {
        return data;
      },
      json: function asJson(data) {
        return JSON.parse(data);
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GraphGuruPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var import_python_shell = __toESM(require_python_shell());

// src/settings.ts
var import_obsidian = require("obsidian");
var DefaultGuruSettings = {
  focus_directory: "./"
};
var GraphGuruSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Graph Guru Settings" });
    new import_obsidian.Setting(containerEl).setName("Focus Directory").setDesc("Enter the directory you wish for GraphGuru to focus on.").addText((text) => text.setPlaceholder("Enter your directory").setValue(this.plugin.settings.focus_directory).onChange(async (value) => {
      this.plugin.settings.focus_directory = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/main.ts
var GraphGuruPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.guruCoordinates = null;
  }
  async onload() {
    if (this.app.vault.adapter instanceof import_obsidian2.FileSystemAdapter) {
      this.path = this.app.vault.adapter.getBasePath();
      this.pythonScriptsPath = this.path + "/.obsidian/plugins/obsidian-graph-guru/src/processing/script.py";
    }
    this.settings = Object.assign({}, DefaultGuruSettings, await this.loadData());
    await this.saveSettings();
    this.addSettingTab(new GraphGuruSettingTab(this.app, this));
    this.statusBar = this.addStatusBarItem();
    this.addCommand({
      id: "init-graph-guru",
      name: "Initialize GraphGuru",
      callback: async () => {
        const guruCoordinates = await this.initialize();
        if (guruCoordinates != null) {
          this.guruCoordinates = guruCoordinates;
          new import_obsidian2.Notice("GraphGuru is initialized");
          this.statusBar.setText(`GraphGuru Initialized \u2705`);
          console.log(this.guruCoordinates);
        } else {
          new import_obsidian2.Notice("GraphGuru is not initialized");
          this.statusBar.setText(`GraphGuru Not Initialized \u{1F621}`);
        }
      }
    });
    this.addRibbonIcon("palmtree", "Open GraphGuru", async () => {
      if (this.guruCoordinates != null) {
        new import_obsidian2.Notice("GraphGuru is initialized");
      } else {
        new import_obsidian2.Notice("GraphGuru is not initialized");
      }
    });
  }
  // public async writeToCSV(coordinates : object[]) {    
  //     const headers = "type,lat,long,link\n";
  //     // Create a string with the coordinates in CSV format
  //     let csvData = "";
  //     for (const c of coordinates) {
  //         const lat = c.coords[0];
  //         const lon = c.coords[0];
  //         csvData += `,,${lat},${lon}\n`;
  //     }
  //     const fileContent = headers + csvData;
  //     this.app.vault.adapter.write('coords.csv', fileContent);
  // }
  async initialize() {
    console.log("Initializing GraphGuru");
    try {
      const result = await this.sendToPython();
      return result;
    } catch (error) {
      console.log(error);
    }
  }
  async sendToPython() {
    try {
      const pyshell = new import_python_shell.PythonShell(this.pythonScriptsPath);
      pyshell.send(this.app.vault.configDir);
      pyshell.on("message", (message) => {
        try {
          const output = JSON.parse(message);
        } catch (err) {
          console.log(err);
        }
      });
      pyshell.end(function(err, code, signal) {
        if (err)
          throw err;
        console.log("The exit code was: " + code);
        console.log("The exit signal was: " + signal);
        console.log("finished");
      });
    } catch (error) {
      console.log(error);
    }
  }
  async getVaultAllFiles() {
    const files = this.app.vault.getFiles();
    const fileObjects = files.map(async (f) => {
      const text = await this.app.vault.read(f);
      const metadata = this.app.metadataCache.getFileCache(f);
      let tags = null;
      if (metadata != null) {
        tags = (0, import_obsidian2.getAllTags)(metadata);
      }
      return {
        // metadata: metadata,
        text,
        tags
      };
    });
    return fileObjects;
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("unloading plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
