/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  ExampleModal: () => ExampleModal,
  GraphView: () => GraphView,
  VIEW_TYPE_GRAPH: () => VIEW_TYPE_GRAPH,
  default: () => GuruPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var GuruPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const files = await this.getAllVaultFiles();
    console.log(files);
    const preprocessedFiles = await this.sendToPythonScript(files);
    console.log(preprocessedFiles);
    this.registerView(
      VIEW_TYPE_GRAPH,
      (leaf) => new GraphView(leaf, files.length)
    );
    this.addRibbonIcon("citrus", "Activate Graph View", () => {
      console.log("lmao");
    });
    await this.loadSettings();
    this.addSettingTab(new GuruSettingTab(this.app, this));
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText(`Graph Guru focused on ${files.length} files`);
  }
  onunload() {
    console.log("unloading plugin");
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_GRAPH);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_GRAPH);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_TYPE_GRAPH,
      active: true
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(VIEW_TYPE_GRAPH)[0]
    );
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // PREPROCESSING ------------------------------------------------
  async getAllVaultFiles() {
    const files = this.app.vault.getFiles();
    const fileObjects = files.map(async (f) => {
      const text = await this.app.vault.read(f);
      const metadata = this.app.metadataCache.getFileCache(f);
      let tags = null;
      if (metadata != null) {
        tags = (0, import_obsidian.getAllTags)(metadata);
      }
      return {
        text,
        metadata,
        tags
      };
    });
    return await Promise.all(fileObjects);
  }
  async sendToPythonScript(files) {
    return new Promise((resolve, reject) => {
      const pythonProcess = (0, import_child_process.spawn)("python", ["./src/preprocessing.py"]);
      const results = [];
      pythonProcess.stdout.on("data", (data) => {
        results.push(JSON.parse(data.toString()));
      });
      pythonProcess.stderr.on("data", (data) => {
        reject(data.toString());
      });
      pythonProcess.on("close", (code) => {
        if (code === 0) {
          resolve(results);
        } else {
          reject(`Python process exited with code ${code}`);
        }
      });
      for (const file of files) {
        pythonProcess.stdin.write(JSON.stringify(file) + "\n");
      }
      pythonProcess.stdin.end();
    });
  }
};
var VIEW_TYPE_GRAPH = "graph-view";
var GraphView = class extends import_obsidian.ItemView {
  constructor(leaf, numFiles) {
    super(leaf);
    this.numFiles = numFiles;
  }
  getViewType() {
    return VIEW_TYPE_GRAPH;
  }
  getDisplayText() {
    return "Graph View";
  }
  async onOpen() {
    const containerEl = this.containerEl.children[1];
    containerEl.empty();
    containerEl.createEl("h4", { text: `Number of Files Found: ${this.numFiles}` });
  }
  async onClose() {
  }
};
var ExampleModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "What's your name?" });
    new import_obsidian.Setting(contentEl).setName("Name").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DEFAULT_SETTINGS = {
  focus_directory: "./",
  favorite_color: "Purple"
};
var GuruSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Graph Guru Settings" });
    new import_obsidian.Setting(containerEl).setName("Focus Directory").setDesc("Enter the directory you wish for The Guru to focus on.").addText((text) => text.setPlaceholder("Enter your directory").setValue(this.plugin.settings.focus_directory).onChange(async (value) => {
      console.log("Directory: " + value);
      this.plugin.settings.focus_directory = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Favorite Color").setDesc("Let us know your favorite color.").addText((text) => text.setPlaceholder("Enter color").setValue(this.plugin.settings.favorite_color).onChange(async (value) => {
      console.log("Color: " + value);
      this.plugin.settings.favorite_color = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
